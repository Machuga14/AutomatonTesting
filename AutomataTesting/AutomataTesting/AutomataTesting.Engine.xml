<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutomataTesting.Engine</name>
    </assembly>
    <members>
        <member name="T:AutomataTesting.Automaton">
            <summary>
            <see cref="T:AutomataTesting.Automaton"/> class representing a state lookup for <see cref="T:AutomataTesting.State"/> objects, for traversal of a grammar.
            </summary>
        </member>
        <member name="P:AutomataTesting.Automaton.StateLookup">
            <summary>
            Gets or sets the state lookup for this <see cref="T:AutomataTesting.Automaton"/> object.
            </summary>
        </member>
        <member name="T:AutomataTesting.AutomatonEvaluator">
            <summary>
            <see langword="static"/> <see cref="!:class"/> to evaluate a <see cref="T:System.String"/> with a provided <see cref="T:AutomataTesting.Automaton"/> representing a logical Regular Grammar,
            in order to determine if the specified string is legal.
            </summary>
        </member>
        <member name="M:AutomataTesting.AutomatonEvaluator.EvalAutomaton(AutomataTesting.Automaton,System.String)">
            <summary>
            Method to evaluate a string against a specified <see cref="T:AutomataTesting.Automaton"/> to determine legality.
            </summary>
            <param name="aut">The <see cref="T:AutomataTesting.Automaton"/> to evaluate.</param>
            <param name="data">The string to evaluate efficacy of.</param>
            <returns><see langword="true"/> if the string is legal, else, <see langword="false"/>.</returns>
        </member>
        <member name="T:AutomataTesting.AutomatonParser">
            <summary>
            Static Class capable of parsing <see cref="T:AutomataTesting.Automaton"/> objects.
            </summary>
        </member>
        <member name="M:AutomataTesting.AutomatonParser.ParseAutomaton(System.String)">
            <summary>
            Parses an <see cref="T:AutomataTesting.Automaton"/> based upon the description defined within the provided string.
            </summary>
            <param name="s">The string defining the <see cref="T:AutomataTesting.Automaton"/> to construct.</param>
            <returns>An <see cref="T:AutomataTesting.Automaton"/> representing the string defined.</returns>
        </member>
        <member name="M:AutomataTesting.AutomatonParser.ParseStateLine(System.String)">
             <summary>
             Expects a string similar to:
             E={a|O,b|O},true
             Indicating that two strings are legal in state E:
             a, which maps to O, and b, which maps to O, as well as e being an accepting state.
            
             Doesn't fully populate the State Object, and instead, returns a partially populated state object, with a list(tuple(string, statename) indicating the mapping states.
             </summary>
             <param name="s">the string to parse.</param>
             <returns>A Tuple representing a <see cref="T:AutomataTesting.State"/>, and list of tuple(string,string) describing the legal characters and state transformations of the <see cref="T:AutomataTesting.State"/>, for secondary parsing.</returns>
        </member>
        <member name="T:AutomataTesting.State">
            <summary>
            Class representing a <see cref="T:AutomataTesting.State"/>, composed of a name, whether the state is accepting, as wel as the map of acceptable strings, and the states
            that they map to.
            </summary>
        </member>
        <member name="P:AutomataTesting.State.StateName">
            <summary>
            Gets or sets the name of this state.
            </summary>
        </member>
        <member name="P:AutomataTesting.State.IsAccepting">
            <summary>
            Gets or sets a value indicating whether this is an accepting (or ending) state.
            </summary>
        </member>
        <member name="P:AutomataTesting.State.AcceptableStrings">
            <summary>
            Gets or sets the collection of acceptable strings by this state, as well as the state the string maps to.
            </summary>
        </member>
        <member name="M:AutomataTesting.State.ToString">
            <summary>
            Overridden ToString() Method.
            </summary>
            <returns>A string representation of this <see cref="T:AutomataTesting.State"/> object.</returns>
        </member>
    </members>
</doc>
